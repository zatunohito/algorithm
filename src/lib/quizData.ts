

import type { Quiz } from '@/types/quiz';

export const mockQuizzes: Quiz[] = [
  {
    id: '1',
    title: '模擬試験 1',
    questions: [
      {
        id: 1,
        text: '次の配列をバブルソートで昇順に並べ替えるとき、最初のパス（走査）が終了した時点の配列の状態として正しいものはどれか。',
        code: 'const arr = [5, 3, 8, 1, 4];',
        options: [
          { id: 'a', text: '[3, 5, 1, 4, 8]' },
          { id: 'b', text: '[3, 5, 8, 1, 4]' },
          { id: 'c', text: '[3, 8, 1, 4, 5]' },
          { id: 'd', text: '[5, 3, 1, 4, 8]' },
        ],
        correctAnswer: 'a',
        explanation: 'バブルソートの最初のパスでは、隣接する要素を比較・交換しながら最大の要素を末尾に移動させます。\n[5, 3, 8, 1, 4] -> [3, 5, 8, 1, 4] -> [3, 5, 8, 1, 4] -> [3, 5, 1, 8, 4] -> [3, 5, 1, 4, 8] となります。',
      },
      {
        id: 2,
        text: '線形探索（リニアサーチ）の最悪計算時間（Worst-case time complexity）として正しいものはどれか。nは要素数を表す。',
        options: [
          { id: 'a', text: 'O(1)' },
          { id: 'b', text: 'O(log n)' },
          { id: 'c', text: 'O(n)' },
          { id: 'd', text: 'O(n^2)' },
        ],
        correctAnswer: 'c',
        explanation: '線形探索では、最悪の場合、配列のすべての要素をチェックする必要があります。したがって、計算時間は要素数nに比例します。',
      },
      {
        id: 3,
        text: '次のうち、探索対象のデータがソート済みである必要があるアルゴリズムはどれか。',
        options: [
          { id: 'a', text: '線形探索' },
          { id: 'b', text: '二分探索' },
          { id: 'c', text: 'ハッシュ法' },
          { id: 'd', text: '深さ優先探索' },
        ],
        correctAnswer: 'b',
        explanation: '二分探索は、探索範囲の中央の値と目的の値を比較し、探索範囲を半分に絞り込んでいく手法です。そのため、データがソートされていることが前提となります。',
      },
      {
        id: 4,
        text: 'スタック（Stack）のデータ構造を説明しているものとして、最も適切なものはどれか。',
        options: [
          { id: 'a', text: '先入れ先出し (FIFO: First-In, First-Out)' },
          { id: 'b', text: '後入れ先出し (LIFO: Last-In, First-Out)' },
          { id: 'c', text: 'キーと値のペアで管理する' },
          { id: 'd', text: '優先度付きでデータを取り出す' },
        ],
        correctAnswer: 'b',
        explanation: 'スタックは、最後に追加したデータが最初に取り出される「後入れ先出し（LIFO）」のデータ構造です。本を積み重ねるイメージで考えるとわかりやすいです。',
      },
      {
        id: 5,
        text: '再帰呼び出し（Recursion）を利用して階乗（Factorial）を計算する関数 factorial(n) がある。factorial(4) を呼び出したとき、factorial 関数が呼び出される回数として正しいものはどれか。（ベースケースを含む）',
        code: 'function factorial(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}',
        options: [
          { id: 'a', text: '3回' },
          { id: 'b', text: '4回' },
          { id: 'c', text: '5回' },
          { id: 'd', text: '6回' },
        ],
        correctAnswer: 'c',
        explanation: 'factorial(4)が呼び出されると、内部でfactorial(3), factorial(2), factorial(1), factorial(0)が順に呼び出されます。したがって、合計5回呼び出されます。',
      },
    ],
  },
  {
    id: 'apply1-mock-5',
    title: 'Apply1 模擬試験 (5問)',
    questions: [
      {
        id: 1,
        text: 'プログラムの実行が開始される最初のポイントを何と呼びますか？',
        options: [
          { id: 'a', text: '終了' },
          { id: 'b', text: '開始' },
          { id: 'c', text: '分岐' },
          { id: 'd', text: '繰り返し' },
        ],
        correctAnswer: 'b',
        explanation: 'プログラムは「開始」から実行され、処理が順番に進みます。',
      },
      {
        id: 2,
        text: '中身を後から変更できる「箱」のようなものを何と呼びますか？',
        options: [
          { id: 'a', text: '定数' },
          { id: 'b', text: '関数' },
          { id: 'c', 'text': '変数' },
          { id: 'd', text: '配列' },
        ],
        correctAnswer: 'c',
        explanation: '変数は、プログラムの実行中に値を変更できるデータを保存する場所です。',
      },
      {
        id: 3,
        text: '「もし〜ならば」という条件に応じて処理を分ける制御構造を何と呼びますか？',
        options: [
          { id: 'a', text: '繰り返し' },
          { id: 'b', text: '条件分岐' },
          { id: 'c', text: '関数' },
          { id: 'd', text: '配列' },
        ],
        correctAnswer: 'b',
        explanation: '条件分岐は、特定の条件が満たされているかどうかに基づいて異なるコードブロックを実行します。',
      },
      {
        id: 4,
        text: '以下の配列 `data` から、値 `22` を線形探索で探します。アルゴリズムが見つけたインデックスは何になりますか？（インデックスは0から始まります）',
        code: 'const data = [15, 7, 22, 13, 40];',
        options: [
          { id: 'a', text: '0' },
          { id: 'b', text: '1' },
          { id: 'c', text: '2' },
          { id: 'd', text: '3' },
        ],
        correctAnswer: 'c',
        explanation: '線形探索では、配列を先頭から順に見ていき、`22`はインデックス`2`で見つかります。',
      },
      {
        id: 5,
        text: 'ソート済みの配列に対して、効率的な探索を行うアルゴリズムはどれですか？',
        options: [
          { id: 'a', text: '線形探索' },
          { id: 'b', text: 'バブルソート' },
          { id: 'c', text: '二分探索' },
          { id: 'd', text: '選択ソート' },
        ],
        correctAnswer: 'c',
        explanation: '二分探索は、ソート済みの配列に対して高速な探索が可能です。',
      },
    ],
  },
  {
    id: 'apply1-mock-10',
    title: 'Apply1 模擬試験 (10問)',
    questions: [
      {
        id: 1,
        text: 'プログラムの実行が開始される最初のポイントを何と呼びますか？',
        options: [
          { id: 'a', text: '終了' },
          { id: 'b', text: '開始' },
          { id: 'c', text: '分岐' },
          { id: 'd', text: '繰り返し' },
        ],
        correctAnswer: 'b',
        explanation: 'プログラムは「開始」から実行され、処理が順番に進みます。',
      },
      {
        id: 2,
        text: '中身を後から変更できる「箱」のようなものを何と呼びますか？',
        options: [
          { id: 'a', text: '定数' },
          { id: 'b', text: '関数' },
          { id: 'c', 'text': '変数' },
          { id: 'd', text: '配列' },
        ],
        correctAnswer: 'c',
        explanation: '変数は、プログラムの実行中に値を変更できるデータを保存する場所です。',
      },
      {
        id: 3,
        text: '「もし〜ならば」という条件に応じて処理を分ける制御構造を何と呼びますか？',
        options: [
          { id: 'a', text: '繰り返し' },
          { id: 'b', text: '条件分岐' },
          { id: 'c', text: '関数' },
          { id: 'd', text: '配列' },
        ],
        correctAnswer: 'b',
        explanation: '条件分岐は、特定の条件が満たされているかどうかに基づいて異なるコードブロックを実行します。',
      },
      {
        id: 4,
        text: '以下の配列 `data` から、値 `22` を線形探索で探します。アルゴリズムが見つけたインデックスは何になりますか？（インデックスは0から始まります）',
        code: 'const data = [15, 7, 22, 13, 40];',
        options: [
          { id: 'a', text: '0' },
          { id: 'b', text: '1' },
          { id: 'c', text: '2' },
          { id: 'd', text: '3' },
        ],
        correctAnswer: 'c',
        explanation: '線形探索では、配列を先頭から順に見ていき、`22`はインデックス`2`で見つかります。',
      },
      {
        id: 5,
        text: 'ソート済みの配列に対して、効率的な探索を行うアルゴリズムはどれですか？',
        options: [
          { id: 'a', text: '線形探索' },
          { id: 'b', text: 'バブルソート' },
          { id: 'c', text: '二分探索' },
          { id: 'd', text: '選択ソート' },
        ],
        correctAnswer: 'c',
        explanation: '二分探索は、ソート済みの配列に対して高速な探索が可能です。',
      },
      {
        id: 6,
        text: '同じ処理を何度も実行するための制御構造を何と呼びますか？',
        options: [
          { id: 'a', text: '条件分岐' },
          { id: 'b', text: '関数' },
          { id: 'c', text: '繰り返し' },
          { id: 'd', text: '変数' },
        ],
        correctAnswer: 'c',
        explanation: '繰り返し（ループ）は、特定のコードブロックを複数回実行するために使用されます。',
      },
      {
        id: 7,
        text: '複数の値をまとめて管理するためのデータ構造を何と呼びますか？',
        options: [
          { id: 'a', text: '変数' },
          { id: 'b', text: '定数' },
          { id: 'c', text: '関数' },
          { id: 'd', text: '配列' },
        ],
        correctAnswer: 'd',
        explanation: '配列は、同じ型の複数のデータを順序付けて格納するためのデータ構造です。',
      },
      {
        id: 8,
        text: '一連の処理をひとまとめにし、再利用可能にするものを何と呼びますか？',
        options: [
          { id: 'a', text: '変数' },
          { id: 'b', text: '定数' },
          { id: 'c', text: '関数' },
          { id: 'd', text: '繰り返し' },
        ],
        correctAnswer: 'c',
        explanation: '関数は、特定のタスクを実行するコードのブロックであり、再利用性を高めます。',
      },
      {
        id: 9,
        text: '以下の配列 `arr` をバブルソートで昇順に並べ替えるとき、2回目のパスが終了した時点の配列の状態として正しいものはどれか。',
        code: 'const arr = [5, 3, 8, 1, 4];',
        options: [
          { id: 'a', text: '[1, 3, 4, 5, 8]' },
          { id: 'b', text: '[3, 1, 4, 5, 8]' },
          { id: 'c', text: '[3, 5, 1, 4, 8]' },
          { id: 'd', text: '[1, 3, 5, 4, 8]' },
        ],
        correctAnswer: 'b',
        explanation: '1回目のパス後: [3, 5, 1, 4, 8]。2回目のパスでは、未ソート部分 [3, 5, 1, 4] に対してバブルソートを行い、[3, 1, 4, 5] となります。最終的に [3, 1, 4, 5, 8] となります。',
      },
      {
        id: 10,
        text: '再帰関数において、無限ループを防ぎ、再帰呼び出しを停止させるための条件を何と呼びますか？',
        options: [
          { id: 'a', text: '引数' },
          { id: 'b', text: '戻り値' },
          { id: 'c', text: 'ベースケース' },
          { id: 'd', text: '再帰ステップ' },
        ],
        correctAnswer: 'c',
        explanation: 'ベースケースは、再帰関数が自分自身を呼び出すのを停止する条件です。',
      },
    ],
  },
];
